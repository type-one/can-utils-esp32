cmake_minimum_required(VERSION 3.10)
include(CMakePrintHelpers)

# cmake -DCMAKE_BUILD_TYPE=Debug -G Ninja .

# set the project name and version
project(can_utils_esp32 VERSION 1.0)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Detect clang-tidy and verify its version
find_program(CLANG_TIDY_PROGRAM clang-tidy)
if(CLANG_TIDY_PROGRAM)
    execute_process(
        COMMAND ${CLANG_TIDY_PROGRAM} --version
        OUTPUT_VARIABLE CLANG_TIDY_VERSION_OUTPUT
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    string(REGEX MATCH "version ([0-9]+\\.[0-9]+\\.[0-9]+)" _ ${CLANG_TIDY_VERSION_OUTPUT})
    set(CLANG_TIDY_VERSION ${CMAKE_MATCH_1})
    message(STATUS "clang-tidy found: ${CLANG_TIDY_PROGRAM}, version: ${CLANG_TIDY_VERSION}")

    if(CLANG_TIDY_VERSION VERSION_GREATER_EQUAL "18.0.0")
	    # TODO code still need some clean-up to pass clang-tidy checks
        # set(CMAKE_CXX_CLANG_TIDY "clang-tidy;--extra-arg=-std=c++20")
    else()
        message(WARNING "clang-tidy version is below 18.0.0, skipping CMAKE_CXX_CLANG_TIDY setup")
    endif()

else()
    message(WARNING "clang-tidy not found")
endif()

# https://stackoverflow.com/questions/11944060/how-to-detect-target-architecture-using-cmake

if(UNIX AND NOT APPLE)
    set(LINUX TRUE)
endif()

if(UNIX AND (${CMAKE_SYSTEM_NAME} STREQUAL ${CMAKE_HOST_SYSTEM_NAME}))
    EXECUTE_PROCESS( COMMAND uname -m COMMAND tr -d '\n' OUTPUT_VARIABLE ARCHITECTURE )
elseif(ANDROID)
    set(ARCHITECTURE, ${ANDROID_ABI})
elseif(APPLE)
    set(ARCHITECTURE, ${OSX_ARCHITECTURES})
else()
    set(ARCHITECTURE, "unknown")
endif()

#detect Platform (Jetson, Raspberry Pi, ...)
#EXECUTE_PROCESS( COMMAND cat /proc/cpuinfo COMMAND grep Hardware COMMAND tr -d '\n' OUTPUT_VARIABLE PLATFORM_DETECTION )
# grep Hardware /proc/cpuinfo
set(PLATFORM_DETECTION, "unknown")

message( STATUS "Architecture: ${ARCHITECTURE}" )

# if(NOT LINUX) should work, too, if you need that
if(LINUX) 
    message(STATUS "OS: Linux")
# linux stuff here
else()
    message(STATUS "OS: Unix Not Linux")
    # stuff that should happen not on Linux 
endif()

if(WIN32)
    # for Windows operating system in general
    message(STATUS "OS: Windows")
endif()

if(MSVC OR MSYS OR MINGW)
    # for detecting Windows compilers
endif()

#if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
#    // do something for Linux
#else
#    // do something for other OS

# Host CMAKE_HOST_SYSTEM_NAME
# Target CMAKE_SYSTEM_NAME

# CMAKE_COMPILER_IS_GNUCC
# CMAKE_SYSTEM_PROCESSOR
# CMAKE_HOST_SYSTEM_PROCESSOR
# The ${ANDROID_ABI} variable is the way to go in Android, where it assumes values like arm64-v8a, x86_64 and so on

# specify the C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED True)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif()

if(LINUX) 
    set(CMAKE_CXX_FLAGS "-march=native")
    set(CMAKE_CXX_FLAGS_DEBUG "-g -Wall -Wextra -D DEBUG")
    set(CMAKE_CXX_FLAGS_RELEASE "-O2 -D NDEBUG")

    set(CMAKE_C_FLAGS "-march=native")
    set(CMAKE_C_FLAGS_DEBUG "-g -Wall -Wextra -D DEBUG")
    set(CMAKE_C_FLAGS_RELEASE "-O2 -D NDEBUG")

    find_program(CCACHE_PROGRAM ccache)
    if(CCACHE_PROGRAM)
        set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}")
        set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK "${CCACHE_PROGRAM}")
        message(STATUS "ccache found and enabled")
    endif()

elseif(WIN32)
    set(CMAKE_CXX_FLAGS "")
    set(CMAKE_CXX_FLAGS_DEBUG "/D DEBUG")
    set(CMAKE_CXX_FLAGS_RELEASE "/O2 /D NDEBUG")

    set(CMAKE_C_FLAGS "")
    set(CMAKE_C_FLAGS_DEBUG "/D DEBUG")
    set(CMAKE_C_FLAGS_RELEASE "/O2 /D NDEBUG")
endif()

# uname -m
# i386 i686 x86_64 ia64 alpha amd64 arm armeb armel hppa m32r m68k mips mipsel powerpc ppc64 s390 s390x sh3 sh3eb sh4 sh4eb sparc

# https://developer.android.com/ndk/guides/abis
# 


################################
# Boost subset
################################

# https://matgomes.com/integrate-google-test-into-cmake/
include(FetchContent)

# https://cmake.org/cmake/help/latest/module/FindGit.html
find_package(Git REQUIRED)
if(Git_FOUND)
  message("Git found: ${GIT_EXECUTABLE}")
endif()

# Boost version
set(BOOST_VERSION 1.87.0)

# Boost Core (Boost license)
FetchContent_Declare(
    boost_core
    GIT_REPOSITORY https://github.com/boostorg/core.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_core)
set(BOOST_CORE_INCLUDE_PATH "${boost_core_SOURCE_DIR}/include")
cmake_print_variables(BOOST_CORE_INCLUDE_PATH)

# Boost Spirit (Boost license)
FetchContent_Declare(
    boost_spirit
    GIT_REPOSITORY https://github.com/boostorg/spirit.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_spirit)
set(BOOST_SPIRIT_INCLUDE_PATH "${boost_spirit_SOURCE_DIR}/include")
cmake_print_variables(BOOST_SPIRIT_INCLUDE_PATH)

# Boost Fusion (Boost license)
FetchContent_Declare(
    boost_fusion
    GIT_REPOSITORY https://github.com/boostorg/fusion.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_fusion)
set(BOOST_FUSION_INCLUDE_PATH "${boost_fusion_SOURCE_DIR}/include")
cmake_print_variables(BOOST_FUSION_INCLUDE_PATH)

# Boost Endian (Boost license)
FetchContent_Declare(
    boost_endian
    GIT_REPOSITORY https://github.com/boostorg/endian.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_endian)
set(BOOST_ENDIAN_INCLUDE_PATH "${boost_endian_SOURCE_DIR}/include")
cmake_print_variables(BOOST_ENDIAN_INCLUDE_PATH)

# Boost Config (Boost license)
FetchContent_Declare(
    boost_config
    GIT_REPOSITORY https://github.com/boostorg/config.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_config)
set(BOOST_CONFIG_INCLUDE_PATH "${boost_config_SOURCE_DIR}/include")
cmake_print_variables(BOOST_CONFIG_INCLUDE_PATH)

# Boost MPL (Boost license)
FetchContent_Declare(
    boost_mpl
    GIT_REPOSITORY https://github.com/boostorg/mpl.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_mpl)
set(BOOST_MPL_INCLUDE_PATH "${boost_mpl_SOURCE_DIR}/include")
cmake_print_variables(BOOST_MPL_INCLUDE_PATH)

# Boost Type Traits (Boost license)
FetchContent_Declare(
    boost_type_traits
    GIT_REPOSITORY https://github.com/boostorg/type_traits.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_type_traits)
set(BOOST_TYPE_TRAITS_INCLUDE_PATH "${boost_type_traits_SOURCE_DIR}/include")
cmake_print_variables(BOOST_TYPE_TRAITS_INCLUDE_PATH)

# Boost Utility (Boost license)
FetchContent_Declare(
    boost_utility
    GIT_REPOSITORY https://github.com/boostorg/utility.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_utility)
set(BOOST_UTILITY_INCLUDE_PATH "${boost_utility_SOURCE_DIR}/include")
cmake_print_variables(BOOST_UTILITY_INCLUDE_PATH)

# Boost Preprocessor (Boost license)
FetchContent_Declare(
    boost_preprocessor
    GIT_REPOSITORY https://github.com/boostorg/preprocessor.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_preprocessor)
set(BOOST_PREPROCESSOR_INCLUDE_PATH "${boost_preprocessor_SOURCE_DIR}/include")
cmake_print_variables(BOOST_PREPROCESSOR_INCLUDE_PATH)

# Boost Assert (Boost license)
FetchContent_Declare(
    boost_assert
    GIT_REPOSITORY https://github.com/boostorg/assert.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_assert)
set(BOOST_ASSERT_INCLUDE_PATH "${boost_assert_SOURCE_DIR}/include")
cmake_print_variables(BOOST_ASSERT_INCLUDE_PATH)

# Boost Static Assert (Boost license)
FetchContent_Declare(
    boost_static_assert
    GIT_REPOSITORY https://github.com/boostorg/static_assert.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_static_assert)
set(BOOST_STATIC_ASSERT_INCLUDE_PATH "${boost_static_assert_SOURCE_DIR}/include")
cmake_print_variables(BOOST_STATIC_ASSERT_INCLUDE_PATH)

# Boost Variant (Boost license)
FetchContent_Declare(
    boost_variant
    GIT_REPOSITORY https://github.com/boostorg/variant.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_variant)
set(BOOST_VARIANT_INCLUDE_PATH "${boost_variant_SOURCE_DIR}/include")
cmake_print_variables(BOOST_VARIANT_INCLUDE_PATH)

# Boost Type Index (Boost license)
FetchContent_Declare(
    boost_type_index
    GIT_REPOSITORY https://github.com/boostorg/type_index.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_type_index)
set(BOOST_TYPE_INDEX_INCLUDE_PATH "${boost_type_index_SOURCE_DIR}/include")
cmake_print_variables(BOOST_TYPE_INDEX_INCLUDE_PATH)

# Boost Container Hash (Boost license)
FetchContent_Declare(
    boost_container_hash
    GIT_REPOSITORY https://github.com/boostorg/container_hash.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_container_hash)
set(BOOST_CONTAINER_HASH_INCLUDE_PATH "${boost_container_hash_SOURCE_DIR}/include")
cmake_print_variables(BOOST_CONTAINER_HASH_INCLUDE_PATH)

# Boost Describe (Boost license)
FetchContent_Declare(
    boost_describe
    GIT_REPOSITORY https://github.com/boostorg/describe.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_describe)
set(BOOST_DESCRIBE_INCLUDE_PATH "${boost_describe_SOURCE_DIR}/include")
cmake_print_variables(BOOST_DESCRIBE_INCLUDE_PATH)

# Boost MP11 (Boost license)
FetchContent_Declare(
    boost_mp11
    GIT_REPOSITORY https://github.com/boostorg/mp11.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_mp11)
set(BOOST_MP11_INCLUDE_PATH "${boost_mp11_SOURCE_DIR}/include")
cmake_print_variables(BOOST_MP11_INCLUDE_PATH)

# Boost Detail (Boost license)
FetchContent_Declare(
    boost_detail
    GIT_REPOSITORY https://github.com/boostorg/detail.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_detail)
set(BOOST_DETAIL_INCLUDE_PATH "${boost_detail_SOURCE_DIR}/include")
cmake_print_variables(BOOST_DETAIL_INCLUDE_PATH)

# Boost Integer (Boost license)
FetchContent_Declare(
    boost_integer
    GIT_REPOSITORY https://github.com/boostorg/integer.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_integer)
set(BOOST_INTEGER_INCLUDE_PATH "${boost_integer_SOURCE_DIR}/include")
cmake_print_variables(BOOST_INTEGER_INCLUDE_PATH)

# Boost Throw Exception (Boost license)
FetchContent_Declare(
    boost_throw_exception
    GIT_REPOSITORY https://github.com/boostorg/throw_exception.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_throw_exception)
set(BOOST_THROW_EXCEPTION_INCLUDE_PATH "${boost_throw_exception_SOURCE_DIR}/include")
cmake_print_variables(BOOST_THROW_EXCEPTION_INCLUDE_PATH)

# Boost Range (Boost license)
FetchContent_Declare(
    boost_range
    GIT_REPOSITORY https://github.com/boostorg/range.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_range)
set(BOOST_RANGE_INCLUDE_PATH "${boost_range_SOURCE_DIR}/include")
cmake_print_variables(BOOST_RANGE_INCLUDE_PATH)

# Boost Optional (Boost license)
FetchContent_Declare(
    boost_optional
    GIT_REPOSITORY https://github.com/boostorg/optional.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_optional)
set(BOOST_OPTIONAL_INCLUDE_PATH "${boost_optional_SOURCE_DIR}/include")
cmake_print_variables(BOOST_OPTIONAL_INCLUDE_PATH)

# Boost Iterator (Boost license)
FetchContent_Declare(
    boost_iterator
    GIT_REPOSITORY https://github.com/boostorg/iterator.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_iterator)
set(BOOST_ITERATOR_INCLUDE_PATH "${boost_iterator_SOURCE_DIR}/include")
cmake_print_variables(BOOST_ITERATOR_INCLUDE_PATH)

# Boost Concept Check (Boost license)
FetchContent_Declare(
    boost_concept_check
    GIT_REPOSITORY https://github.com/boostorg/concept_check.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_concept_check)
set(BOOST_CONCEPT_CHECK_INCLUDE_PATH "${boost_concept_check_SOURCE_DIR}/include")
cmake_print_variables(BOOST_CONCEPT_CHECK_INCLUDE_PATH)

# Boost TypeOf (Boost license)
FetchContent_Declare(
    boost_typeof
    GIT_REPOSITORY https://github.com/boostorg/typeof.git
    GIT_TAG boost-${BOOST_VERSION}
)
FetchContent_MakeAvailable(boost_typeof)
set(BOOST_TYPEOF_INCLUDE_PATH "${boost_typeof_SOURCE_DIR}/include")
cmake_print_variables(BOOST_TYPEOF_INCLUDE_PATH)

################################
# Local code
################################

# Local header files here ONLY
file(GLOB_RECURSE TARGET_H
    *.h
    *.hpp
    *.inl
)

# Local source files here

set(TARGET_CAN_UTILS_SRC
        can/can_codec.cpp
        dbc/dbc_parser.cpp
        v2c/v2c_transcoder.cpp
)

set(TARGET_SRC
        "${TARGET_CAN_UTILS_SRC}"        
)

include_directories(
    "${PROJECT_SOURCE_DIR}"
    "${BOOST_CORE_INCLUDE_PATH}"
    "${BOOST_SPIRIT_INCLUDE_PATH}"
    "${BOOST_FUSION_INCLUDE_PATH}"
    "${BOOST_ENDIAN_INCLUDE_PATH}"
    "${BOOST_CONFIG_INCLUDE_PATH}"
    "${BOOST_MPL_INCLUDE_PATH}"
    "${BOOST_TYPE_TRAITS_INCLUDE_PATH}"
    "${BOOST_UTILITY_INCLUDE_PATH}"
    "${BOOST_PREPROCESSOR_INCLUDE_PATH}"
    "${BOOST_ASSERT_INCLUDE_PATH}"
    "${BOOST_STATIC_ASSERT_INCLUDE_PATH}"
    "${BOOST_VARIANT_INCLUDE_PATH}"
    "${BOOST_TYPE_INDEX_INCLUDE_PATH}"
    "${BOOST_CONTAINER_HASH_INCLUDE_PATH}"
    "${BOOST_DESCRIBE_INCLUDE_PATH}"
    "${BOOST_MP11_INCLUDE_PATH}"
    "${BOOST_DETAIL_INCLUDE_PATH}"
    "${BOOST_INTEGER_INCLUDE_PATH}"
    "${BOOST_THROW_EXCEPTION_INCLUDE_PATH}"
    "${BOOST_RANGE_INCLUDE_PATH}"
    "${BOOST_OPTIONAL_INCLUDE_PATH}"
    "${BOOST_ITERATOR_INCLUDE_PATH}"
    "${BOOST_CONCEPT_CHECK_INCLUDE_PATH}"
    "${BOOST_TYPEOF_INCLUDE_PATH}"
)

add_library(can_utils_modules STATIC "${TARGET_H}" "${TARGET_SRC}")

add_executable(can_utils_esp32 example/example.cpp)   

if(LINUX) 
    target_link_libraries(can_utils_esp32 can_utils_modules -lm -lpthread)
elseif(WIN32)
    target_link_libraries(can_utils_esp32 can_utils_modules)
endif()

################################
# Google Test
################################

# https://cmake.org/cmake/help/latest/module/FindGTest.html
find_package(GTest 1.11.0)
if(GTest_FOUND)
  message("Google Test found")
else()
    message("Google Test fetch from github")
    FetchContent_Declare(
    googletest
    GIT_REPOSITORY https://github.com/google/googletest.git
    GIT_TAG        release-1.11.0
    )

    if(MSVC OR MSYS OR MINGW)
    set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
    endif()

    set(BUILD_GMOCK OFF CACHE BOOL "" FORCE)
    set(BUILD_GTEST ON CACHE BOOL "" FORCE)

    FetchContent_MakeAvailable(googletest)
endif()

enable_testing()

################################
# Tests
################################

# Add your test files here
set(TEST_SOURCES
    tests/test_can_codec.cpp
    tests/test_dbc_parser.cpp
    # Add more test files as needed
)

# Create an executable for running tests
add_executable(run_tests ${TEST_SOURCES})

# Link Google Test and pthread library
target_link_libraries(run_tests can_utils_modules gtest gtest_main pthread)

# Add a custom target to run the tests
add_custom_target(
    run_tests_command ALL
    COMMAND run_tests
    DEPENDS run_tests
)

gtest_discover_tests(run_tests)
